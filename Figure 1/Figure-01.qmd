---
title: "Figure 1"
format: html
theme: 
  light: zephyr
  dark: cyborg
toc: true
page-layout: full
number-sections: true
number-depth: 3
editor: visual
self-contained: true
---

# Loading libraries

```{r}
pacman::p_load(tidyverse,
               broom,
               ggbeeswarm,
               survminer,
               survival,
               tidytext,
               cowplot,
               factoextra)
```

# Figure 1A Inter-species (survival)

## Import data

Import metadata.

```{r}
metadata <- 
  read_csv('Figure-01-metadata.csv')
```

Import mortality data in long format in 3 species of *Acropora*.

```{r}
#| warning: false

survival_data_long_list <- 
  list.files(recursive = F,
             pattern = 'daily-survival-data.csv',
             full.names = F)

survival_data_long <- 
  read_csv(survival_data_long_list,
           id = 'file_name') |> 
  select(!1)
```

Export.

```{r}
write_csv(survival_data_long,
          file = 'Figure-01-A-tables/daily-survival-data.csv')
```

## Clean data

Among the *Acropora* species, only *A. tenuis* showed mortality in the control tanks during exposure. These will not be included in further analyses, cutting the *A. tenuis* colonies that will be included to 25.

These colonies are: ATEN07, ATEN08, ATEN09, ATEN24, ATEN25.

```{r}
unresolved_colonies <- c("ATEN07","ATEN08","ATEN09","ATEN24","ATEN25")

survival_data_long <- 
  survival_data_long |> 
  filter(!Colony %in% unresolved_colonies)
```

Filter data to only include thermally challenged setups. Note that control tanks were only set to check that stress is not confounded by handling stress.

```{r}
survival_data_long_hstressed <- 
  survival_data_long |> 
  filter(Treatment == 'Heat-stressed')
```

## Do statistics

Before doing any plot-related work, set a color palette.

```{r}
species_color_palette <- c("#294557","#558981","#C6BF88")
htol_color_palette <- c("#B2182B", "#2166AC")
```

Comparison of measures of central tendency was done at first but it was deemed that comparison of survival curves is more appropriate.

### Kaplan-Meier curves

Shape data to be appropriate for survival curves analysis.

```{r}
survival_data_long_hstressed_surv <- 
  survival_data_long_hstressed |> 
  select(c(1,4,5,7:9)) 

# Make a tibble for A. millepora that extends to 13 days (for comparison with Adig)
survival_data_long_hstressed_surv_amil <- 
  survival_data_long_hstressed_surv |> 
  filter(Species == 'A. millepora') |> 
  distinct(Colony,
           .keep_all = T) |> 
  mutate('Days elapsed 11' = 11,
         'Days elapsed 12' = 12,
         'Days elapsed 13' = 13,
         `Healthy fragments` = NA) |> 
  select(!`Day elapsed`) |> 
  pivot_longer(cols = !c(1:5),names_to = 'Days',values_to = 'Day elapsed') |> 
  select(!Days)

# Make a tibble for A. millepora that extends to 13 days (for comparison with Adig)
survival_data_long_hstressed_surv_aten <- 
  survival_data_long_hstressed_surv |> 
  filter(Species == 'A. tenuis') |> 
  distinct(Colony,
           .keep_all = T) |> 
  mutate('Days elapsed 11' = 11,
         'Days elapsed 12' = 12,
         'Days elapsed 13' = 13,
         `Healthy fragments` = NA) |> 
  select(!`Day elapsed`) |> 
  pivot_longer(cols = !c(1:5),names_to = 'Days',values_to = 'Day elapsed') |> 
  select(!Days)

# Combine all tibbles
survival_data_long_hstressed_surv <- 
  survival_data_long_hstressed_surv |> 
  bind_rows(survival_data_long_hstressed_surv_amil,
            survival_data_long_hstressed_surv_aten)|> 
  mutate(`Healthy fragments` = case_when(`Healthy fragments` == NA ~ 1,
                                         .default = `Healthy fragments`))
```

Make a dataframe that with status (censor).

```{r}
#| warning: false
survival_data_long_hstressed_surv_frags <- 
  survival_data_long_hstressed_surv |> 
  # Make a string, delimited by comma to make ID fragments
  rowwise() %>%
  mutate('Fragment ID' = paste0(Colony,
                                '_',
                                seq_len(`N fragment`), 
                                collapse = ",")) %>%
  ungroup() %>% 
  # Separate them
  separate(`Fragment ID`,
           into = paste0("Fragment ID_", 
                         1:max(str_count(.$`Fragment ID`, ",")) + 1),
           sep = ",", 
           remove = F,
           extra = 'merge') |> 
  separate(`Fragment ID_8`,
           into = c('Fragment ID_9', 'Fragment ID_10'),
           sep = ",", 
           remove = T) |> 
  # Remove Fragment ID
  select(!`Fragment ID`) |> 
  # Make tibble longer  
  pivot_longer(cols = 7:14,
               values_to = 'Fragment ID',
               values_drop_na = T) |> 
  select(!name) |> 
  mutate('Fragment #' = str_sub(`Fragment ID`, -1, -1),
         'Fragment #' = as.numeric(`Fragment #`)) |> 
  mutate(status = case_when(`Healthy fragments` == NA ~ 1,
                            `Healthy fragments` < `Fragment #` ~ 2,
                            .default = 1))
```

Export shaped tibble.

```{r}
write_csv(survival_data_long_hstressed_surv_frags,
          file = 'Figure-01-A-tables/daily-survival-data_survminer.csv')
```

Make plot.

```{r}
# Fit data
survival_data_long_hstressed_surv_frags_fit <- 
  survfit(Surv(`Day elapsed`, status) ~ Species, data = survival_data_long_hstressed_surv_frags)

# Plot data
survival_data_long_hstressed_surv_frags_fit_plot <- 
  ggsurvplot(survival_data_long_hstressed_surv_frags_fit,
             conf.int = T, 
             data = survival_data_long_hstressed_surv_frags,
             palette = species_color_palette, 
             censor.shape = NA, ylim = c(.80, 1),
             size = 1.5,
             legend = 'right')
```

Export plot.

```{r}
survival_data_long_hstressed_surv_frags_fit_plot

ggsave('Figure-01-A.png',
       dpi = 900,
       width = 7000, 
       height = 3000, 
       units = "px")
```

Make pairwise test.

```{r}
survival_data_long_hstressed_surv_frags_pval <- 
  surv_pvalue(survival_data_long_hstressed_surv_frags_fit,
                    data = survival_data_long_hstressed_surv_frags) 

survival_data_long_hstressed_surv_frags_pwise <- 
  pairwise_survdiff(Surv(`Day elapsed`, status) ~ Species,
                    data = survival_data_long_hstressed_surv_frags) |> 
  tidy()
```

Export stat tables.

```{r}
write_csv(survival_data_long_hstressed_surv_frags_pval,
          'Figure-01-A-tables/km_log-rank_global.csv')

write_csv(survival_data_long_hstressed_surv_frags_pwise,
          'Figure-01-A-tables/km_log-rank_pairwise.csv')
```

# Figure 1B Intra-species (survival, MIG)

## Survival

### Clean data

Shape the initially imported data. For this analysis, only the last day per species will be considered to get the proportion of fragment bleached at end of exposure (% survival).

```{r}
survival_data_long_hstressed_b <- 
  survival_data_long_hstressed |> 
  filter(`Day elapsed` >= 10) |> 
  filter(!(Species == 'A. digitifera' & `Day elapsed` >= 10 & `Day elapsed` < 13)) |> 
  mutate('% fragments healthy' = `Healthy fragments`/`N fragment` * 100) |> 
  group_by(Species) |> 
  mutate(Colony = case_when(Species == 'A. digitifera' ~ paste0('D', str_sub(Colony,5,6)),
                            Species =='A. tenuis' ~ paste0('T', str_sub(Colony,5,6)),
                            Species == 'A. millepora' ~ paste0('M', str_sub(Colony,5,6)),
                            .default = Colony)) |> 
  mutate('Proportion of fragments bleached, %' = 100 - `% fragments healthy`)
```

Export data.

```{r}
survival_data_ranked <- 
  survival_data_long_hstressed_b |> 
  group_by(Species) |> 
  arrange(`Proportion of fragments bleached, %`, .by_group = TRUE) |> 
  mutate(Ranking  = seq_along(Species))

survival_data_ranked |> 
  write_csv('Figure-01-A-tables/ranking-all_fragment-bleaching.csv')
```

### Plot

```{r}
survival_data_long_hstressed_b_p <- 
  survival_data_long_hstressed_b |> 
  ggplot(aes(y = reorder(Colony, desc(`Proportion of fragments bleached, %`)), 
             x = `Proportion of fragments bleached, %`,
             fill = Species)) +
  geom_bar(stat = 'identity') +
  labs(y = 'Colony ID') +
  facet_grid(rows = vars(Species),
             scales = 'free',
             space = 'free') +
  scale_y_discrete(position = 'right') +
  scale_x_reverse() +
  scale_fill_manual(values = species_color_palette) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        strip.text = element_blank())
```

Export plot.

```{r}
ggsave(plot = survival_data_long_hstressed_b_p,
       filename = 'Figure-01-B1.png',
       dpi = 900,
       width = 2500, 
       height = 10000, 
       units = "px")
```

## Mean intensity gray

### *A. digitifera*

Import pre-exposure MIG data.

```{r}
mig_adig_pre <- 
  read_csv('Figure-01-adig-all-pre_mig-data.csv') |> 
  mutate(Replicate = rep(c(1,2),
                         length.out = n()))
```

Import post-exposure MIG data.

```{r}
mig_adig_post <- 
  read_csv('Figure-01-adig-all-post_mig-data.csv') |> 
  mutate(Replicate = rep(c(1,2),
                         length.out = n()))
```

Merge.

```{r}
mig_adig <- 
  mig_adig_pre |>
  left_join(mig_adig_post, 
            by = c('Colony ID',
                   'Tank ID',
                   'Treatment',
                   'Replicate'),
            suffix = c(".pre", ".post"))
```

Compute change.

```{r}
mig_adig_change <- 
  mig_adig |> 
  mutate('% change' = (`Normalized mean gray value.post` - `Normalized mean gray value.pre`)/`Normalized mean gray value.pre` * 100)

mig_adig_change_clean <- 
  mig_adig_change |> 
  filter(Treatment == 'Heat-stressed') |> 
  select(`Colony ID`, `% change`) |> 
  mutate(`Colony ID` = str_replace(`Colony ID`, "ADIG", "D")) |> 
  mutate(Species = 'A. digitifera')
```

### *A. millepora*

Import pre-exposure MIG data.

```{r}
mig_amil_pre <- 
  read_csv('Figure-01-amil-all-pre_mig-data.csv') |> 
  mutate(Replicate = rep(c(1,2),
                         length.out = n()))
```

Import post-exposure MIG data.

```{r}
mig_amil_post <- 
  read_csv('Figure-01-amil-all-post_mig-data.csv') |> 
  mutate(Replicate = rep(c(1,2),
                         length.out = n()))
```

Merge.

```{r}
mig_amil <- 
  mig_amil_pre |>
  left_join(mig_amil_post, 
            by = c('Colony ID',
                   'Tank ID',
                   'Treatment',
                   'Replicate'),
            suffix = c(".pre", ".post"))
```

Compute change.

```{r}
mig_amil_change <- 
  mig_amil |> 
  mutate('% change' = (`Normalized mean gray value.post` - `Normalized mean gray value.pre`)/`Normalized mean gray value.pre` * 100)

mig_amil_change_clean <- 
  mig_amil_change |> 
  filter(Treatment == 'Heat-stressed') |> 
  select(`Colony ID`, `% change`) |> 
  left_join(metadata |> rename(`Colony ID` = `Untransformed ID`) |> 
              select(2,4), 
            by = 'Colony ID') |> 
  relocate(1,3) |> 
  select(!1) |> 
  rename('Colony ID' = `Transformed ID2`) |> 
  mutate(Species = 'A. millepora')
```

### *A. tenuis*

Import pre-exposure MIG data.

```{r}
mig_aten_pre <- 
  read_csv('Figure-01-aten-all-pre_mig-data.csv') |> 
  mutate(Replicate = rep(c(1,2),
                         length.out = n()))
```

Import post-exposure MIG data.

```{r}
mig_aten_post <- 
  read_csv('Figure-01-aten-all-post_mig-data.csv') |> 
  mutate(Replicate = rep(c(1,2),
                         length.out = n()))
```

Merge.

```{r}
mig_aten <- 
  mig_aten_pre |>
  left_join(mig_aten_post, 
            by = c('Colony ID',
                   'Tank ID',
                   'Treatment',
                   'Replicate'),
            suffix = c(".pre", ".post"))
```

Compute change.

```{r}
mig_aten_change <- 
  mig_aten |> 
  mutate('% change' = (`Normalized mean gray value.post` - `Normalized mean gray value.pre`)/`Normalized mean gray value.pre` * 100) |> 
  filter(!`Colony ID` %in% unresolved_colonies)

mig_aten_change_clean <- 
  mig_aten_change |> 
  filter(Treatment == 'Heat-stressed') |> 
  select(`Colony ID`, `% change`) |> 
  mutate(`Colony ID` = str_replace(`Colony ID`, "ATEN", "T")) |> 
  mutate(Species = 'A. tenuis')
```

### Merge dataframes

```{r}
mig_all_clean <- 
  bind_rows(mig_adig_change_clean,
            mig_amil_change_clean,
            mig_aten_change_clean)

# Make a df that will allow you to reorder and rank colonies based on MIG change averages
mig_all_clean_ave <- 
  mig_all_clean |> 
  dplyr::group_by(`Colony ID`) |> 
  drop_na() |> 
  mutate(Mean = mean(`% change`)) |> 
  ungroup()
```

Export data.

```{r}
ranking_all_mig <- 
  mig_all_clean_ave |> 
  group_by(Species) |> 
  arrange(Mean, .by_group = TRUE) |> 
  distinct(`Colony ID`,.keep_all = T) |> 
  mutate(Ranking  = seq_along(Species))

write_csv(ranking_all_mig,
          'Figure-01-A-tables/ranking-all_mig.csv')
```

### Plot

```{r}
mig_all_p <- 
  mig_all_clean_ave |> 
  mutate(`Colony ID` = reorder_within(`Colony ID`, desc(Mean), Species)) |> 
  ggplot(aes(x = `Colony ID`,
             y = `% change`,
             fill = Species,
             color = Species)) + 
  geom_point(size = 0.5,
             alpha = 0.25) +
  geom_hline(yintercept = 0,
             linetype = 'dashed',
             color = 'black',
             linewidth = 0.25) +
  stat_summary(fun = 'mean',
               size = 0.1) +
  facet_grid(vars(cols = Species),
             scales = 'free',
             space = 'free') +
  scale_fill_manual(values = species_color_palette) +
  scale_color_manual(values = species_color_palette) +
  coord_flip() +
  scale_x_reordered() +
  theme_bw() +
  theme(panel.grid = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank())
```

Merge with initial plot.

```{r}
figure_01 <- 
  plot_grid(survival_data_long_hstressed_b_p,
          mig_all_p,
          align = 'hv')
```

Export plot.

```{r}
ggsave(plot = figure_01,
       filename = 'Figure-01.png',
       dpi = 900,
       width = 7500, 
       height = 10000, 
       units = "px")
```

## Survival + MIG

An additional dataset, combining proportion of fragments bleaching and MIG values, was made to check possible changes in classification based on actual bleaching records and image analysis-derived data.

Combine datasets.

```{r}
survival_mig <- 
  survival_data_long_hstressed_b |> 
  ungroup() |> 
  select(Colony, `Proportion of fragments bleached, %`) |> 
  rename('Colony ID' = Colony) |> 
  left_join(ranking_all_mig |> select(!`% change`), by = 'Colony ID') |> 
  relocate(Species)
```

Make a function for min-max normalization.

```{r}
minmax_norm <- 
  function(x){
    (x - min(x)) /(max(x) - min(x))
  }
```

Standardize proportion of fragments bleached and MIG values.

```{r}
survival_mig_standard <- 
  survival_mig |> 
  group_by(Species) |> 
  mutate(`Proportion of fragments bleached, %` = minmax_norm(`Proportion of fragments bleached, %`),
         Mean = minmax_norm(Mean),
         Combined = `Proportion of fragments bleached, %` + Mean)
```

Rank colonies based on combined standardized values.

```{r}
survival_mig_rank <- 
  survival_mig_standard |> 
  select(!Ranking) |> 
  group_by(Species) |> 
  arrange(Combined, .by_group = TRUE) |> 
  mutate(Ranking  = seq_along(Species))

survival_mig_rank |> 
  write_csv('Figure-01-A-tables/ranking-all_fragment-bleaching_mig.csv')
```

## Clustering/grouping

Additional clustering metric was used to find support for the tolerance grouping based on phenotype ranking.

### *A. digitifera*

Filter to get only *A. digitifera* samples.

```{r}
# Edit dataframe to get A. digitifera samples
kmeans_data_adig <- 
  survival_mig |> 
  filter(Species == 'A. digitifera') |>
  select(!c(Ranking, Species)) |> 
  column_to_rownames('Colony ID') |> 
  as.matrix()

# Optimal cluster checking 1 (wss)
kmeans_adig_wss <- 
  fviz_nbclust(kmeans_data_adig,
               kmeans,
               method = "wss",  
               k.max = 10) +
  theme(plot.title = element_blank())

# Optimal cluster checking 2 (gap)
kmeans_adig_gap <- 
  fviz_nbclust(kmeans_data_adig, 
               kmeans, 
               method = "gap",  
               nboot=200, 
               k.max = 10) +
  theme(plot.title = element_blank())

# Optimal cluster checking 3 (sillhouette)
kmeans_adig_sil <- 
  fviz_nbclust(kmeans_data_adig, 
               kmeans, 
               method = "silhouette",  
               k.max = 10) +
  theme(plot.title = element_blank())

# Merge plots that check optimal # of clusters
kmeans_adig_optimal_clustering <- 
  plot_grid(kmeans_adig_wss, 
            kmeans_adig_gap, 
            kmeans_adig_sil,
            nrow = 1)

# Make a plot that shows clusters
kmeans_adig_plot <- 
  kmeans_data_adig |> 
  kmeans(centers = 2) |> 
  fviz_cluster(kmeans_data_adig,
               labelsize = 8,
               repel = T,
               ylab = '% change in MIG values',
               xlab = 'Proportion of fragments bleached') +
  scale_fill_manual(values = rev(htol_color_palette)) +
  scale_color_manual(values = rev(htol_color_palette)) +
  coord_fixed() +
  theme_bw() +
  theme(panel.grid = element_blank(),
        plot.title = element_blank(),
        legend.position = 'none')

# Extract clusters
kmeans_adig_plot_df <- 
  kmeans_data_adig |> 
  kmeans(centers = 2) %>%
  .$cluster |> 
  as.data.frame() |> 
  rownames_to_column() |> 
  rename(ColonyID = 1, 
         Cluster = 2) |> 
  mutate(HeatTolerance = if_else(Cluster == 1, 
                                 'Low', 
                                 'High'))
```

Export.

```{r}
ggsave(kmeans_adig_plot,
       filename = 'Figure-S01_1_adig.png',
       dpi = 900,
       width = 4000, 
       height = 4000, 
       units = "px")

ggsave(kmeans_adig_optimal_clustering,
       filename = 'Figure-S01_2_adig.png',
       dpi = 900,
       width = 8000, 
       height = 3000, 
       units = "px")

write_csv(kmeans_adig_plot_df,
          'Figure-01-A-tables/clusters_adig.csv')
```

### *A. millepora*

Filter to get only *A. millepora* samples.

```{r}
# Edit dataframe to get A. digitifera samples
kmeans_data_amil <- 
  survival_mig |> 
  filter(Species == 'A. millepora') |>
  select(!c(Ranking, Species)) |> 
  column_to_rownames('Colony ID') |> 
  as.matrix()

# Optimal cluster checking 1 (wss)
kmeans_amil_wss <- 
  fviz_nbclust(kmeans_data_amil,
               kmeans,
               method = "wss",  
               k.max = 10) +
  theme(plot.title = element_blank())

# Optimal cluster checking 2 (gap)
kmeans_amil_gap <- 
  fviz_nbclust(kmeans_data_amil, 
               kmeans, 
               method = "gap",  
               nboot=200, 
               k.max = 10) +
  theme(plot.title = element_blank())

# Optimal cluster checking 3 (sillhouette)
kmeans_amil_sil <- 
  fviz_nbclust(kmeans_data_amil, 
               kmeans, 
               method = "silhouette",  
               k.max = 10) +
  theme(plot.title = element_blank())

# Merge plots that check optimal # of clusters
kmeans_amil_optimal_clustering <- 
  plot_grid(kmeans_amil_wss, 
            kmeans_amil_gap, 
            kmeans_amil_sil,
            nrow = 1)

# Make a plot that shows clusters
kmeans_amil_plot <- 
  kmeans_data_amil |> 
  kmeans(centers = 2) |> 
  fviz_cluster(kmeans_data_amil,
               labelsize = 8,
               repel = T,
               ylab = '% change in MIG values',
               xlab = 'Proportion of fragments bleached') +
  scale_fill_manual(values = rev(htol_color_palette)) +
  scale_color_manual(values = rev(htol_color_palette)) +
  coord_fixed() +
  theme_bw() +
  theme(panel.grid = element_blank(),
        plot.title = element_blank(),
        legend.position = 'none')

# Extract clusters
kmeans_amil_plot_df <- 
  kmeans_data_amil |> 
  kmeans(centers = 2) %>%
  .$cluster |> 
  as.data.frame() |> 
  rownames_to_column() |> 
  rename(ColonyID = 1, 
         Cluster = 2) |> 
  mutate(HeatTolerance = if_else(Cluster == 1, 
                                 'Low', 
                                 'High'))
```

Export.

```{r}
ggsave(kmeans_amil_plot,
       filename = 'Figure-S01_1_amil.png',
       dpi = 900,
       width = 4000, 
       height = 4000, 
       units = "px")

ggsave(kmeans_amil_optimal_clustering,
       filename = 'Figure-S01_2_amil.png',
       dpi = 900,
       width = 8000, 
       height = 3000, 
       units = "px")

write_csv(kmeans_amil_plot_df,
          'Figure-01-A-tables/clusters_amil.csv')
```

### *A. tenuis*

Filter to get only *A. tenuis* samples.

```{r}
# Edit dataframe to get A. digitifera samples
kmeans_data_aten <- 
  survival_mig |> 
  filter(Species == 'A. tenuis') |>
  select(!c(Ranking, Species)) |> 
  column_to_rownames('Colony ID') |> 
  as.matrix()

# Optimal cluster checking 1 (wss)
kmeans_aten_wss <- 
  fviz_nbclust(kmeans_data_aten,
               kmeans,
               method = "wss",  
               k.max = 10) +
  theme(plot.title = element_blank())

# Optimal cluster checking 2 (gap)
kmeans_aten_gap <- 
  fviz_nbclust(kmeans_data_aten, 
               kmeans, 
               method = "gap",  
               nboot=200, 
               k.max = 10) +
  theme(plot.title = element_blank())

# Optimal cluster checking 3 (sillhouette)
kmeans_aten_sil <- 
  fviz_nbclust(kmeans_data_aten, 
               kmeans, 
               method = "silhouette",  
               k.max = 10) +
  theme(plot.title = element_blank())

# Merge plots that check optimal # of clusters
kmeans_aten_optimal_clustering <- 
  plot_grid(kmeans_aten_wss, 
            kmeans_aten_gap, 
            kmeans_aten_sil,
            nrow = 1)

# Make a plot that shows clusters
kmeans_aten_plot <- 
  kmeans_data_aten |> 
  kmeans(centers = 2) |> 
  fviz_cluster(kmeans_data_aten,
               labelsize = 8,
               repel = T,
               ylab = '% change in MIG values',
               xlab = 'Proportion of fragments bleached') +
  scale_fill_manual(values = rev(htol_color_palette)) +
  scale_color_manual(values = rev(htol_color_palette)) +
  coord_fixed() +
  theme_bw() +
  theme(panel.grid = element_blank(),
        plot.title = element_blank(),
        legend.position = 'none')

# Extract clusters
kmeans_aten_plot_df <- 
  kmeans_data_aten |> 
  kmeans(centers = 2) %>%
  .$cluster |> 
  as.data.frame() |> 
  rownames_to_column() |> 
  rename(ColonyID = 1, 
         Cluster = 2) |> 
  mutate(HeatTolerance = if_else(Cluster == 2, 
                                 'Low', 
                                 'High'))
```

Export.

```{r}
ggsave(kmeans_aten_plot,
       filename = 'Figure-S01_1_aten.png',
       dpi = 900,
       width = 4000, 
       height = 4000, 
       units = "px")

ggsave(kmeans_aten_optimal_clustering,
       filename = 'Figure-S01_2_aten.png',
       dpi = 900,
       width = 8000, 
       height = 3000, 
       units = "px")

write_csv(kmeans_aten_plot_df,
          'Figure-01-A-tables/clusters_aten.csv')
```

### Merge dataframes

```{r}
kmeans_all_df <- 
  bind_rows(kmeans_adig_plot_df,
            kmeans_amil_plot_df,
            kmeans_aten_plot_df) |> 
  mutate(Species = case_when(str_detect(ColonyID, 'D') ~ 'A. digitifera',
                             str_detect(ColonyID, 'M') ~ 'A. millepora',
                             str_detect(ColonyID, 'T') ~ 'A. tenuis',
                             .default = NA)) |> 
  group_by(Species) |> 
  arrange(HeatTolerance,
          .by_group = T)
```

## Merged ranking

Decide heat tolerance based on ranking.

### Survival data

```{r}
htol_survival_data <- 
  survival_data_ranked |> 
  mutate('Heat tolerance' = ifelse(`Proportion of fragments bleached, %` >= 50, "Low", "High"))

htol_survival_data_clean <- 
  htol_survival_data |> 
  select(1,5,12,13) |> 
  rename('Survival-based ranking' = Ranking,
         'Survival-based heat tolerance' = `Heat tolerance`)
```

### MIG data

```{r}
htol_mig_data <- 
  ranking_all_mig |> 
  rename(Colony = `Colony ID`) |> 
  mutate('Heat tolerance' = case_when(Species == 'A. digitifera' & Ranking <= 8 ~ 'High',
                                      Species == 'A. digitifera' & Ranking >= 33 ~ 'Low',
                                      Species == 'A. millepora' & Ranking <= 6 ~ 'High',
                                      Species == 'A. millepora' & Ranking >= 25 ~ 'Low',
                                      Species == 'A. tenuis' & Ranking <= 5 ~ 'High',
                                      Species == 'A. tenuis' & Ranking >= 21 ~ 'Low',
                                      .default = 'Intermediate')) |> 
  relocate(3)

htol_mig_data_clean <- 
  htol_mig_data |> 
  select(1,2,5,6) |> 
  rename('MIG-based ranking' = Ranking,
         'MIG-based heat tolerance' = `Heat tolerance`)
```

### Survival-MIG data

```{r}
htol_surv_mig_data <- 
  survival_mig_rank |> 
  rename(Colony = `Colony ID`) |> 
  mutate('Heat tolerance' = case_when(Species == 'A. digitifera' & Ranking <= 8 ~ 'High',
                                      Species == 'A. digitifera' & Ranking >= 33 ~ 'Low',
                                      Species == 'A. millepora' & Ranking <= 6 ~ 'High',
                                      Species == 'A. millepora' & Ranking >= 25 ~ 'Low',
                                      Species == 'A. tenuis' & Ranking <= 5 ~ 'High',
                                      Species == 'A. tenuis' & Ranking >= 21 ~ 'Low',
                                      .default = 'Intermediate'))

htol_surv_mig_data_clean <- 
  htol_surv_mig_data |> 
  select(1,2,6,7) |> 
  rename('Survival+MIG-based ranking' = Ranking,
         'Survival+MIG-based heat tolerance' = `Heat tolerance`)
```

### Kmeans clustered data

```{r}
htol_kmeans_data <- 
  kmeans_all_df |> 
  relocate(Species) |> 
  rename(Colony = ColonyID) |> 
  select(!Cluster)

htol_kmeans_data_clean <- 
  htol_kmeans_data |> 
  rename('kmeans-based heat tolerance' = HeatTolerance)
```

### Merged heat tolerance data

```{r}
htol_merged <-
  htol_mig_data_clean |> 
  left_join(htol_survival_data_clean) |> 
  left_join(htol_surv_mig_data_clean) |> 
  left_join(htol_kmeans_data_clean)
```
